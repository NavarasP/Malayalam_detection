--- /opt/conda/envs/fastai/lib/python3.7/site-packages/torch/nn/modules/pooling.py
+++ /opt/conda/envs/fastai/lib/python3.7/site-packages/torch/nn/modules/pooling.py
@@ -10,14 +10,9 @@
                      H and W can be either a ``int``, or ``None`` which means the size will
                      be the same as that of the input.
 
-    Shape:
-        - Input: :math:`(N, C, H_{in}, W_{in})` or :math:`(C, H_{in}, W_{in})`.
-        - Output: :math:`(N, C, S_{0}, S_{1})` or :math:`(C, S_{0}, S_{1})`, where
-          :math:`S=\text{output\_size}`.
-
     Examples:
         >>> # target output size of 5x7
-        >>> m = nn.AdaptiveAvgPool2d((5, 7))
+        >>> m = nn.AdaptiveAvgPool2d((5,7))
         >>> input = torch.randn(1, 64, 8, 9)
         >>> output = m(input)
         >>> # target output size of 7x7 (square)
@@ -25,14 +20,12 @@
         >>> input = torch.randn(1, 64, 10, 9)
         >>> output = m(input)
         >>> # target output size of 10x7
-        >>> m = nn.AdaptiveAvgPool2d((None, 7))
+        >>> m = nn.AdaptiveMaxPool2d((None, 7))
         >>> input = torch.randn(1, 64, 10, 9)
         >>> output = m(input)
 
     """
 
-    output_size: _size_2_opt_t
-
-    def forward(self, input: Tensor) -> Tensor:
+    def forward(self, input):
         return F.adaptive_avg_pool2d(input, self.output_size)
 