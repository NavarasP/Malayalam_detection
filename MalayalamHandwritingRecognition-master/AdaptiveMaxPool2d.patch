--- /opt/conda/envs/fastai/lib/python3.7/site-packages/torch/nn/modules/pooling.py
+++ /opt/conda/envs/fastai/lib/python3.7/site-packages/torch/nn/modules/pooling.py
@@ -1,26 +1,20 @@
 class AdaptiveMaxPool2d(_AdaptiveMaxPoolNd):
     r"""Applies a 2D adaptive max pooling over an input signal composed of several input planes.
 
-    The output is of size :math:`H_{out} \times W_{out}`, for any input size.
+    The output is of size H x W, for any input size.
     The number of output features is equal to the number of input planes.
 
     Args:
-        output_size: the target output size of the image of the form :math:`H_{out} \times W_{out}`.
-                     Can be a tuple :math:`(H_{out}, W_{out})` or a single :math:`H_{out}` for a
-                     square image :math:`H_{out} \times H_{out}`. :math:`H_{out}` and :math:`W_{out}`
-                     can be either a ``int``, or ``None`` which means the size will be the same as that
-                     of the input.
+        output_size: the target output size of the image of the form H x W.
+                     Can be a tuple (H, W) or a single H for a square image H x H.
+                     H and W can be either a ``int``, or ``None`` which means the size will
+                     be the same as that of the input.
         return_indices: if ``True``, will return the indices along with the outputs.
                         Useful to pass to nn.MaxUnpool2d. Default: ``False``
 
-    Shape:
-        - Input: :math:`(N, C, H_{in}, W_{in})` or :math:`(C, H_{in}, W_{in})`.
-        - Output: :math:`(N, C, H_{out}, W_{out})` or :math:`(C, H_{out}, W_{out})`, where
-          :math:`(H_{out}, W_{out})=\text{output\_size}`.
-
     Examples:
         >>> # target output size of 5x7
-        >>> m = nn.AdaptiveMaxPool2d((5, 7))
+        >>> m = nn.AdaptiveMaxPool2d((5,7))
         >>> input = torch.randn(1, 64, 8, 9)
         >>> output = m(input)
         >>> # target output size of 7x7 (square)
@@ -34,8 +28,6 @@
 
     """
 
-    output_size: _size_2_opt_t
-
-    def forward(self, input: Tensor):
+    def forward(self, input):
         return F.adaptive_max_pool2d(input, self.output_size, self.return_indices)
 